// Generated by CoffeeScript 1.9.2
var Hub, Publish, Receive, async, cuid, mkdirp, resolve, shulz;

cuid = require('cuid');

async = require('odo-async');

Publish = require('./publish');

Receive = require('./receive');

shulz = require('shulz');

Hub = require('odo-hub');

resolve = require('path').resolve;

mkdirp = require('mkdirp');

module.exports = function(options) {
  var _, _subscribe, _unsubscribe, address, addresses, advertise, bind, datadir, hub, publisher, receiver, ref, send, subscriptions;
  advertise = options.advertise;
  if (advertise == null) {
    advertise = options.bind;
  }
  bind = options.bind;
  datadir = resolve(process.cwd(), options.datadir);
  mkdirp.sync(datadir);
  publisher = Publish();
  receiver = Receive(bind, function(envelope, done) {
    var fn, i, key, len, ref, tasks;
    envelope = JSON.parse(envelope.toString());
    tasks = [];
    ref = envelope.keys;
    fn = function(key) {
      return tasks.push(function(cb) {
        return hub.emit(key, envelope.data, cb);
      });
    };
    for (i = 0, len = ref.length; i < len; i++) {
      key = ref[i];
      fn(key);
    }
    return async.parallel(tasks, done);
  });
  subscriptions = shulz.open(resolve(datadir, './subscriptions.shulz'));
  ref = subscriptions.all();
  for (_ in ref) {
    addresses = ref[_];
    for (address in addresses) {
      _ = addresses[address];
      publisher.register(address, address);
    }
  }
  _subscribe = function(key, address) {
    var subs;
    subs = subscriptions.get(key);
    if (subs == null) {
      subs = {};
    }
    subs[address] = true;
    subscriptions.set(key, subs);
    return publisher.register(address, address);
  };
  _unsubscribe = function(key, address) {
    var subs;
    subs = subscriptions.get(key);
    if (subs == null) {
      subs = {};
    }
    delete subs[address];
    return subscriptions.set(key, subs);
  };
  hub = Hub.create();
  hub.every('_subscribe', function(m, cb) {
    var i, key, len, ref1;
    ref1 = m.keys;
    for (i = 0, len = ref1.length; i < len; i++) {
      key = ref1[i];
      _subscribe(key, m.address);
    }
    return cb();
  });
  hub.every('_unsubscribe', function(m, cb) {
    var i, key, len, ref1;
    ref1 = m.keys;
    for (i = 0, len = ref1.length; i < len; i++) {
      key = ref1[i];
      _unsubscribe(key, m.address);
    }
    return cb();
  });
  send = function(addresses, msgid, keys, data, cb) {
    var envelope, message;
    envelope = {
      id: msgid,
      keys: keys,
      sent: new Date(),
      data: data
    };
    message = JSON.stringify(envelope);
    return publisher.publish(msgid, message, addresses, cb);
  };
  return {
    publish: function(keys, data, cb) {
      var i, key, len, msgid, subs;
      if (!(keys instanceof Array)) {
        keys = [keys];
      }
      addresses = {};
      for (i = 0, len = keys.length; i < len; i++) {
        key = keys[i];
        subs = subscriptions.get(key);
        if (subs == null) {
          continue;
        }
        for (address in subs) {
          _ = subs[address];
          addresses[address] = true;
        }
      }
      addresses = Object.keys(addresses);
      msgid = cuid();
      if (addresses.length === 0) {
        if (cb != null) {
          async.delay(cb);
        }
        return msgid;
      }
      send(addresses, msgid, keys, data, function() {
        if (cb != null) {
          return async.delay(cb);
        }
      });
      return msgid;
    },
    subscribe: function(address, keys, cb) {
      var fn, i, key, len, subscribemsgids, tasks;
      if (!(keys instanceof Array)) {
        keys = [keys];
      }
      tasks = [];
      subscribemsgids = [];
      publisher.register(address, address);
      fn = function(key) {
        var data, msgid;
        msgid = cuid();
        subscribemsgids.push(msgid);
        data = {
          keys: keys,
          address: advertise
        };
        return tasks.push(function(cb) {
          return send(address, msgid, ['_subscribe'], data, cb);
        });
      };
      for (i = 0, len = keys.length; i < len; i++) {
        key = keys[i];
        fn(key);
      }
      async.parallel(tasks, function() {
        if (cb != null) {
          return async.delay(cb);
        }
      });
      return subscribemsgids;
    },
    unsubscribe: function(address, keys, cb) {
      var fn, i, key, len, tasks, unsubscribemsgids;
      if (!(keys instanceof Array)) {
        keys = [keys];
      }
      tasks = [];
      unsubscribemsgids = [];
      publisher.register(address, address);
      fn = function(key) {
        var data, msgid;
        msgid = cuid();
        unsubscribemsgids.push(msgid);
        data = {
          keys: keys,
          address: advertise
        };
        return tasks.push(function(cb) {
          return send(address, msgid, ['_unsubscribe'], data, cb);
        });
      };
      for (i = 0, len = keys.length; i < len; i++) {
        key = keys[i];
        fn(key);
      }
      async.parallel(tasks, function() {
        if (cb != null) {
          return async.delay(cb);
        }
      });
      return unsubscribemsgids;
    },
    hub: hub,
    close: function() {
      publisher.close();
      receiver.close();
      return subscriptions.close();
    }
  };
};
