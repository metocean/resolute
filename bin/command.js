// Generated by CoffeeScript 1.9.2
var _, address, addresses, args, datadir, fs, i, incoming, incoming_path, j, k, key, len, len1, len2, outgoing, outgoing_path, path, pathstodelete, ref, ref1, resolve, shulz, subscriptions, subscriptions_path, uniqueaddresses, usage, usage_error, waserror;

usage = "Usage: resolute [datadir]\n       resolute unlock\n\nShow the status of a resolute data directory\n\nCommands:\n  unlock                  Unlock all maps\n\nOptions:\n  -h                      Display this usage information\n  -v                      Display the version number\n";

process.on('uncaughtException', function(err) {
  console.error('Caught exception: ');
  console.error(err.stack);
  return process.exit(1);
});

usage_error = (function(_this) {
  return function(message) {
    console.error();
    console.error("  " + message);
    console.error();
    console.error(usage);
    return process.exit(1);
  };
})(this);

args = process.argv.slice(2);

if (args.length > 3) {
  return console.error(usage);
}

resolve = require('path').resolve;

shulz = require('shulz');

fs = require('fs');

datadir = process.cwd();

if (args.length === 1) {
  if (args[0] === 'unlock') {
    pathstodelete = [resolve(datadir, './subscriptions.shulz.lock'), resolve(datadir, './outgoing.shulz.lock'), resolve(datadir, './incoming.shulz.lock')];
    for (i = 0, len = pathstodelete.length; i < len; i++) {
      path = pathstodelete[i];
      if (fs.existsSync(path)) {
        console.log("Removed " + path);
        fs.unlinkSync(path);
      }
    }
    process.exit(0);
  }
  datadir = resolve(datadir, args[0]);
}

waserror = false;

subscriptions_path = resolve(datadir, './subscriptions.shulz');

if (!fs.existsSync(subscriptions_path)) {
  console.error("Cannot open " + subscriptions_path);
  waserror = true;
}

outgoing_path = resolve(datadir, './outgoing.shulz');

if (!fs.existsSync(outgoing_path)) {
  console.error("Cannot open " + outgoing_path);
  waserror = true;
}

incoming_path = resolve(datadir, './incoming.shulz');

if (!fs.existsSync(incoming_path)) {
  console.error("Cannot open " + incoming_path);
  waserror = true;
}

if (waserror) {
  process.exit(-1);
}

subscriptions = shulz.read(subscriptions_path);

outgoing = shulz.read(outgoing_path);

incoming = shulz.read(incoming_path);

console.log('# Keys');

ref = Object.keys(subscriptions);
for (j = 0, len1 = ref.length; j < len1; j++) {
  key = ref[j];
  console.log("- " + key);
}

console.log();

uniqueaddresses = {};

for (_ in subscriptions) {
  addresses = subscriptions[_];
  for (address in addresses) {
    _ = addresses[address];
    uniqueaddresses[address] = true;
  }
}

console.log('# Subscribers');

ref1 = Object.keys(uniqueaddresses);
for (k = 0, len2 = ref1.length; k < len2; k++) {
  key = ref1[k];
  console.log("- " + key);
}

console.log();

console.log("# " + (Object.keys(outgoing).length) + " outgoing");

console.log("# " + (Object.keys(incoming).length) + " incoming");
